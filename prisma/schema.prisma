// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account{
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String
  access_token String
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])

}

model Session {
  sessionToken String @unique
  userId String 
  expires DateTime
  user User @relation(fields: [userId], references: [id])
}

model VerificationToken{
  identifier String
  token String
  expires DateTime

  @@id([identifier, token])
}
model User {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  password String @unique
  email String @unique
  emailVerified DateTime?
  username String @unique
  accounts Account[]
  sessions Session[]
  exercises Exercise[]
  gymSessions GymSession[]
  splits Split[]
} 

model Set{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  weightMetric WeightMetric @default(KG)
  weight Float
  reps Int
  exercise Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
}
model Exercise{
  id Int @id @default(autoincrement())
  name String @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  sets Set[]
  session GymSession @relation(fields: [sessionId], references: [id])
  sessionId Int
  notes String?
}

model GymSession{
  id Int @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endTime DateTime?
  exercises Exercise[]
  split Split @relation(fields: [splitId], references: [id])
  splitId Int
}

model Split{
  id Int @id @default(autoincrement())
  name String @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  gymSessions GymSession[]
}
enum WeightMetric{
  KG
  LB
}